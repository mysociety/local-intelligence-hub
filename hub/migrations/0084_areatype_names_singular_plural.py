# Generated by Django 4.2.11 on 2025-09-10 15:34

from django.db import migrations, models


def populate_names(apps, schema_editor):
    AreaType = apps.get_model("hub", "AreaType")
    db_alias = schema_editor.connection.alias

    NAMES_SINGULAR = {
        "WMC": "Pre-2024 Parliamentary Constituency",
        "WMC23": "Parliamentary Constituency",
        "STC": "Single Tier Council",
        "DIS": "District Council",
    }

    NAMES_PLURAL = {
        "WMC": "Pre-2024 Parliamentary Constituencies",
        "WMC23": "Parliamentary Constituencies",
        "STC": "Single Tier Councils",
        "DIS": "District Councils",
    }

    SHORT_NAMES_SINGULAR = {
        "WMC": "constituency",
        "WMC23": "constituency",
        "STC": "council",
        "DIS": "council",
    }

    SHORT_NAMES_PLURAL = {
        "WMC": "constituencies",
        "WMC23": "constituencies",
        "STC": "councils",
        "DIS": "councils",
    }

    for at in AreaType.objects.using(db_alias).all():
        at.name_singular = NAMES_SINGULAR.get(at.code, "")
        at.name_plural = NAMES_PLURAL.get(at.code, "")
        at.short_name_singular = SHORT_NAMES_SINGULAR.get(at.code, "")
        at.short_name_plural = SHORT_NAMES_PLURAL.get(at.code, "")
        at.save()


def revert_names(apps, schema_editor):
    AreaType = apps.get_model("hub", "AreaType")
    db_alias = schema_editor.connection.alias

    NAMES = {
        "WMC": "District Councils",
        "WMC23": "Single Tier Councils",
        "STC": "Westminster constituencies",
        "DIS": "2010 Parliamentary Constituency",
    }

    for at in AreaType.objects.using(db_alias).all():
        at.name = NAMES.get(at.code, "")
        at.save()


class Migration(migrations.Migration):

    dependencies = [
        ("hub", "0083_add_default_site_to_everything"),
    ]

    operations = [
        # This will only be run when the migration is _unapplied_.
        # And because operations are reverted in _reverse_ order when
        # a migration is unapplied, this reverse_code function will
        # run _after_ the areatype.name field has been restored.
        migrations.RunPython(code=migrations.RunPython.noop, reverse_code=revert_names),
        # Complicated workaround here, because `name` was originally
        # a non-nullable field without a default value, so can’t be
        # automatically recreated when the migration is unapplied.
        # SeparateDatabaseAndState allows us to add a default value,
        # so the migration can be run in both directions.
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="areatype",
                    name="name",
                ),
            ],
            database_operations=[
                migrations.RunSQL(
                    sql="ALTER TABLE hub_areatype DROP COLUMN IF EXISTS name",
                    reverse_sql="""
                        ALTER TABLE hub_areatype
                        ADD COLUMN name varchar(50) DEFAULT '' NOT NULL;
                    """,
                ),
            ],
        ),
        migrations.AddField(
            model_name="areatype",
            name="name_plural",
            field=models.CharField(default="", max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="areatype",
            name="name_singular",
            field=models.CharField(default="", max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="areatype",
            name="short_name_plural",
            field=models.CharField(default="", max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="areatype",
            name="short_name_singular",
            field=models.CharField(default="", max_length=50),
            preserve_default=False,
        ),
        # Providing an explicit no-op reverse_code callback here just to make
        # it super obvious that we don’t need this operation to be reversible.
        # (When the migration is unapplied, and the operations "undone" in
        # reverse order, we want `revert_names` to run _after_ the model
        # fields have been reset, which means it must go at the start of the
        # `operations` list.)
        migrations.RunPython(
            code=populate_names, reverse_code=migrations.RunPython.noop
        ),
    ]

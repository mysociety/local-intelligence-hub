# Generated by Django 4.1.2 on 2023-05-24 11:21

from django.db import migrations

country_exclusions = [
    (
        ["Scotland"],
        [
            "constituency_wi_groups",
            "constituency_wi_group_count",
            "constituency_nt_properties",
            "constituency_nt_properties_count",
        ],
    ),
    (
        ["Northern Ireland"],
        [
            "tearfund_churches",
            "would-change-party",
            "less-favourable-conservative-weaken-climate",
            "prefer-conservative-leader-invest-renewables",
            "support-offshore-wind",
            "support-onshore-wind",
            "support-solar",
            "support-tidal",
            "support-wave",
            "support-nuclear",
            "support-local-renewable",
            "believe-gov-renewable-invest-increase",
            "believe-gov-renewable-should-invest",
            "believe-block-onshore-wind",
            "constituency_nz_support",
            "constituency_nz_neutral",
            "constituency_nz_oppose",
            "constituency_cc_high",
            "hnh_mrp_24-3",
            "hnh_mrp_29",
            "hnh_mrp_37-1",
        ],
    ),
    (
        ["Northern Ireland", "Scotland", "Wales"],
        ["efpc_constituency_fuel_poverty", "power_postcodes", "power_postcodes_count"],
    ),
    (
        ["Northern Ireland", "Scotland"],
        [
            "constituency_cafod_activists_count",
            "constituency_cafod_parishes_count",
            "constituency_cafod_schools_count",
        ],
    ),
]


def update_country_exclusions(apps, schemaeditor):  # pragma: no cover
    """
    First, update the country exclusion attributes on relevant datasets
    """
    DataSet = apps.get_model("hub", "DataSet")
    for exclude_countries, dataset_names in country_exclusions:
        DataSet.objects.filter(name__in=dataset_names).update(
            exclude_countries=exclude_countries
        )


def fill_blanks(apps, schemaeditor):  # pragma: no cover
    """
    Next, fill in blanks on ALL area datasets
    """
    DataSet = apps.get_model("hub", "DataSet")
    AreaData = apps.get_model("hub", "AreaData")
    DataType = apps.get_model("hub", "DataType")
    Area = apps.get_model("hub", "Area")

    for dataset in DataSet.objects.filter(table="areadata"):
        if (
            dataset.data_type
            in [
                "integer",
                "float",
                "percent",
            ]
            and dataset.fill_blanks
        ):
            datatype = DataType.objects.filter(data_set=dataset).first()
            datum_example = AreaData.objects.filter(data_type=datatype).first()
            if datum_example.float:
                key = "float"
            elif datum_example.int:
                key = "int"
            else:
                key = "data"
            defaults = {key: 0}
            areas_with_values = [
                areadata.area.name
                for areadata in AreaData.objects.filter(data_type=datatype)
            ]
            # If some countries are set to be excluded, their values should not be filled in
            if dataset.exclude_countries != []:
                for country in dataset.exclude_countries:
                    areas_with_values.extend(
                        [
                            areadata.area.name
                            for areadata in AreaData.objects.filter(
                                data_type__name="country"
                            ).filter(data=country)
                        ]
                    )

            areas_without_values = Area.objects.exclude(name__in=areas_with_values)
            for area in areas_without_values:
                data, created = AreaData.objects.update_or_create(
                    area=area, data_type=datatype, defaults=defaults
                )
            print(
                f"{int(len(areas_without_values))} blank data points set to 0 in {dataset.name}"
            )


def reverse_noop(apps, schema_editor):  # pragma: no cover
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("hub", "0039_add_blank_filling_options"),
    ]

    operations = [
        migrations.RunPython(update_country_exclusions, fill_blanks, reverse_noop)
    ]
